#N canvas 93 150 703 721 10;
#X declare -lib sms;
#X obj 9 596 smssynth~ \$0-blarg;
#X msg 69 361 stocgain \$1;
#X floatatom 71 340 5 0 0 0 - - - 0;
#X msg 70 318 transpose \$1;
#X floatatom 71 291 5 0 0 0 - - - 0;
#X msg 89 407 synthtype \$1;
#X obj 88 387 hradio 15 1 0 3 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 0;
#X obj 14 93 smsbuf \$0-blarg;
#X msg 14 67 open \$1;
#X obj 14 46 openpanel;
#X obj 14 26 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X msg 9 142 buffer;
#X msg 28 209 buffer other-buffer;
#X msg 35 229 info;
#X msg 99 433 sizeHop 1024;
#X obj 622 -19 cnv 15 60 30 empty empty SMS 10 16 1 20 #dc0038 #fcfcc4 0;
#X obj 451 669 sms;
#X text 581 614 RTE - Oct 2008;
#X text 337 630 [smsanal] is part of a library for using Spectral Model Synthesis techniques in pd. For more information and how the analysis/synthesis externals work together \, see the main help file -->;
#N canvas 0 0 702 491 dac 0;
#X obj 216 271 t b;
#X obj 216 218 f;
#X obj 216 296 f;
#X msg 330 295 0;
#X obj 216 248 moses 1;
#X obj 330 267 t b f;
#X obj 296 228 moses 1;
#X obj -110 -26 dbtorms;
#X obj -110 47 line~;
#X obj -75 119 *~;
#X obj -110 4 pack 0 50;
#X obj 140 157 bng 15 250 50 0 empty mute m 5 8 0 9 #fcfcfc #000000 #000000;
#X obj -38 119 *~;
#X floatatom 126 136 4 0 120 0 dB - - 0;
#X obj 159 103 vsl 15 68 0 110 0 1 empty empty empty 0 -8 0 8 #fcfcfc #000000 #000000 5400 0;
#X obj -12 -5 inlet~;
#X obj 54 -8 inlet~;
#X obj -77 156 dac~ 1 2;
#X text -30 -90 Modified output~ to catch in stereo \, with dsp control;
#X obj -4 217 env~ 8092;
#X obj -5 186 *~ 0.5;
#X connect 0 0 2 0;
#X connect 1 0 4 0;
#X connect 2 0 14 0;
#X connect 3 0 14 0;
#X connect 4 0 0 0;
#X connect 4 1 5 0;
#X connect 5 0 3 0;
#X connect 6 1 2 1;
#X connect 7 0 10 0;
#X connect 8 0 9 0;
#X connect 8 0 12 0;
#X connect 9 0 17 0;
#X connect 9 0 20 0;
#X connect 10 0 8 0;
#X connect 11 0 1 0;
#X connect 12 0 17 1;
#X connect 12 0 20 0;
#X connect 14 0 7 0;
#X connect 14 0 6 0;
#X connect 14 0 1 1;
#X connect 15 0 9 1;
#X connect 16 0 12 1;
#X connect 19 0 13 0;
#X connect 20 0 19 0;
#X coords 0 -1 1 1 75 75 1 100 100;
#X restore 10 623 pd dac;
#X text 118 91 <--- you need this \, it is where the analysis ends up. See it's help file for detailed usage.;
#X text 240 -5 [smssynth] will synthesize a spectral model stored in an [smsbuf] object. The data is stored in successive 'frames' that are targeted by sending a float value to [smssynth~]. It will interpolate from frame to frame \, and also between adjacent frames if you provide it non-integer value (ex. 40.5 will create a new frame half way between SMS_Data frame 40 and 41).;
#X text 187 434 currently not working.. but would be nice to be able to change hopsize on the fly.;
#X text 63 134 <-- once data is loaded into smsbuf \, you need to send a buffer command in order to initialize the synthesizer based on the model's parameters. If [smssynth~] does not have the buffer name as it's first argument \, you will need to provide it as an argument with the "buffer" message;
#X text 70 228 <-- see currently loaded synthesis parameters;
#X text 116 292 <-- transpose the deterministic based on the equal tempered scale;
#X text 149 358 <-- multiply the stochastic component's amplitude by a constant;
#X text 177 387 <--- choose which part to synthesize (all \, deterministic \, stochastic);
#X msg 93 558 verbose \$1;
#X text 166 557 print lots of stuff;
#X obj 94 539 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#N canvas 660 172 930 498 spectral-enveloping 0;
#X msg 14 67 open \$1;
#X obj 14 46 openpanel;
#X obj 14 26 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 14 93 smsbuf \$0-sinenv-buf;
#X obj 78 393 outlet;
#X msg 102 61 verbose 1;
#X obj 130 213 symbol \$0-blarg;
#X obj 130 195 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 60 133 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 91 130 use the buffer above;
#X text 152 187 use the main file's envelope (helps make some transposes sound better;
#X msg 78 265 sinenv \$1;
#X obj 163 310 pack;
#X floatatom 163 270 5 0 0 2 envframe \$0-envframe - 0;
#X obj 230 264 hsl 128 15 0 1 0 0 empty empty interp-factor -2 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X floatatom 262 305 5 0 0 0 - - - 0;
#X text 367 261 <-- 0 = original \, 1 = all of new envelope \, value inbetweeen interpolates between the two;
#X obj 227 283 t b f;
#X msg 112 36 info;
#X obj 158 84 print;
#X obj 60 151 symbol \$0-sinenv-buf;
#X msg 163 338 sinenvframe \$1 \$2;
#X obj 308 76 s \$0-frame;
#X obj 318 96 s \$0-envframe;
#X floatatom 312 42 5 0 0 0 - - - 0;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 1 19 0;
#X connect 5 0 3 0;
#X connect 6 0 11 0;
#X connect 7 0 6 0;
#X connect 8 0 20 0;
#X connect 11 0 4 0;
#X connect 12 0 21 0;
#X connect 13 0 12 0;
#X connect 14 0 17 0;
#X connect 17 0 12 0;
#X connect 17 1 12 1;
#X connect 17 1 15 0;
#X connect 18 0 3 0;
#X connect 20 0 11 0;
#X connect 21 0 4 0;
#X connect 24 0 22 0;
#X connect 24 0 23 0;
#X restore 95 484 pd spectral-enveloping;
#X text 237 486 <--- look in here to see how to use spectral enveloping;
#X floatatom 46 260 5 0 0 0 - \$0-frame - 0;
#X text 85 259 <--- frame synthesis (try using floats with shift-drag);
#X obj 14 6 declare -lib sms;
#X connect 0 0 19 0;
#X connect 0 0 19 1;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 0 0 0;
#X connect 4 0 3 0;
#X connect 5 0 0 0;
#X connect 6 0 5 0;
#X connect 8 0 7 0;
#X connect 9 0 8 0;
#X connect 10 0 9 0;
#X connect 11 0 0 0;
#X connect 12 0 0 0;
#X connect 13 0 0 0;
#X connect 14 0 0 0;
#X connect 28 0 0 0;
#X connect 30 0 28 0;
#X connect 31 0 0 0;
#X connect 33 0 0 0;
