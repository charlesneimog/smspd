name: Deken Upload 
on:
  workflow_dispatch:
    inputs:
      ObjVersion:
        description: 'Add the version for upload'
        type: string
        required: true
      Windows:
        description: 'Build and Upload Windows?'
        type: boolean
        required: true
        default: true
      Linux:
        description: 'Build and Upload Linux?'
        type: boolean
        required: true
        default: true
      Mac:
        description: 'Build and Upload Mac?'
        type: boolean
        required: true
        default: true

jobs:  
  linux-build:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.Linux == 'true' }}
    timeout-minutes: 7
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Build Dependencies
        run: |
          sudo apt-get install puredata -y
          sudo apt install software-properties-common -y
          sudo apt-get update
          sudo apt-get install libsndfile1-dev
          sudo apt-get install libgsl0-dev
          sudo apt-get install patchelf

      - name: Build
        run: make 
      
      - name: Copy files 
        run: |
          mkdir pdsms
          cp sms.pd_linux pdsms
          cp libsms.so pdsms
          mkdir pdsms/src
          cp src/* pdsms/src -r
          ./resources/localdeps/localdeps.linux.sh pdsms/sms.pd_linux
                
      - name: Configure Deken
        env:
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
        run: |
          curl https://raw.githubusercontent.com/pure-data/deken/main/developer/deken > deken
          chmod 755 ./deken
          mkdir ~/.deken
          cp help/* pdsms -r
          python3 -m venv ~/.deken/virtualenv/
          source ~/.deken/virtualenv/bin/activate
          python3 -m pip install hy==0.19
          ./deken upgrade --self
          ./deken package pdsms -v ${{ github.event.inputs.ObjVersion }} -n pdsms 
          echo username=${{ secrets.DEKEN_USERNAME }} > ~/.deken/config
          echo password=${{ secrets.DEKEN_PASSWORD }} >> ~/.deken/config
          ./deken upload *.dek
        continue-on-error: true

      - name: Upload Deken
        env:
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
        run: |
          source ~/.deken/virtualenv/bin/activate
          echo username=${{ secrets.DEKEN_USERNAME }} > ~/.deken/config
          echo password=${{ secrets.DEKEN_PASSWORD }} >> ~/.deken/config
          ./deken upload *.dek


  windows-build:
    runs-on: windows-latest
    if: ${{ github.event.inputs.Windows == 'true' }}
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - if: runner.os == 'Windows'
      name: "Install mingw deps"
      uses: msys2/setup-msys2@v2
      with:
          install: make autoconf automake libtool mingw-w64-x86_64-gcc libtool mingw-w64-x86_64-libwinpthread-git mingw-w64-x86_64-libsystre mingw-w64-x86_64-dlfcn unzip mingw-w64-x86_64-libsndfile mingw-w64-x86_64-gsl mingw-w64-x86_64-cmake
          update: false

    - name: Configure Environment
      run: |
        mkdir pdsms
        choco install puredata --yes

    - if: runner.os == 'Windows'
      name: Build pdsms and Mk
      shell: msys2 {0}
      run: |
        make
        mv sms.dll sms.m_amd64
        mkdir pdsms\\src\\
        cp help/* pdsms -r
        cp src/* pdsms/src -r
        cp sms.m_amd64 pdsms\
        cp libsms.dll pdsms\
        ./resources/localdeps/localdeps.win.sh pdsms/sms.m_amd64
        ./resources/localdeps/localdeps.win.sh pdsms/libsms.dll
      
    - if: runner.os == 'Windows'
      name: Build pdsms
      env:
        DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
      shell: msys2 {0}
      run: |
        mkdir ~/.deken
        echo username=${{ secrets.DEKEN_USERNAME }} > ~/.deken/config
        echo password=${{ secrets.DEKEN_PASSWORD }} >> ~/.deken/config
        wget https://github.com/pure-data/deken/releases/download/v0.9.2/deken_Windows64.zip
        unzip deken_Windows64.zip
        echo username=${{ secrets.DEKEN_USERNAME }} > ~/.deken/config
        echo password=${{ secrets.DEKEN_PASSWORD }} >> ~/.deken/config
        ./deken package pdsms -v ${{ github.event.inputs.ObjVersion }} -n pdsms
        ./deken upload *.dek

  macos-intel-build:
    runs-on: macos-latest
    if: ${{ github.event.inputs.Mac == 'true' }}
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0

    - name: set Enviroment
      run: |
        brew install --cask pd
        mkdir pdsms
        brew install gsl
        brew install libsndfile

    # - name: Where is libsndfile
    #   run: |
    #     find / -name "sndfile.h"

    - name: Build
      run: make

    - name: Copy files to pdsms
      run: |
        cp sms.pd_darwin pdsms
        mkdir pdsms/resources
        mkdir pdsms/src
        cp -r src/* pdsms/src
        ./resources/localdeps/localdeps.macos.sh pdsms/sms.d_amd64
        ./resources/localdeps/localdeps.macos.sh pdsms/libsms.so

    - name: Upload Deken
      env:
        DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
      run: |
        wget https://github.com/pure-data/deken/releases/download/v0.9.2/deken_macOS.zip -O deken_macOS.zip
        unzip deken_macOS.zip
        mkdir ~/.deken
        echo username=${{ secrets.DEKEN_USERNAME }} > ~/.deken/config
        echo password=${{ secrets.DEKEN_PASSWORD }} >> ~/.deken/config
        ./deken package pdsms -v ${{ github.event.inputs.ObjVersion }} -n pdsms
        ./deken upload *.dek
