=-=-=-=-=-=-=- libsms change log -=-=-=-=-=-=

=== June 23, 2009 === version 1.101 =====================================================

New features:
	- Can now transform sounds using their spectral envelopes. By setting the appropriate
	flags in an SMS_ModifyParams struct and calling sms_modify, it is possible to shape the
	partials of one sound using the spectral envelope of another (or a linear interpolation
	anywhere between their two envelopes), and to transpose sounds while maintaining the
	original spectral envelope. In fact the envelopes do not have to be related to any
	analysed sounds, they could be generated by any means and then applied to the detected
	partials of a given sound, so purely synthetic envelopes could be used as well.
	- The full SMS analysis/synthesis process is now callable from Python, and a Python
	module called SMS.py has been created that will analyze or synthesize a file with a single
	function call. See the demo script python/AnalysisSynthesis.py for an example of using it.
        - new misc. functions: sms_rms, sms_arrayScalarTempered

API changes:
	- All transformations (including transpostion and stochastic component scaling) should
	now be performed using the sms_modify function. The required transformations are specified
	by using the SMS_ModifyParams structure. Examples of using this (from Python) can be found
	in the file python/modify_examples.py.
        - dB conversion is slightly different.  It is normalized to above 0, using a threshhold (default 0.00001)
          to avoid NaN's.  You can set this with sms_setMagThresh
        - all magnitudes are now stored in linear
        - windows are now left un-normalized by default. Call sms_scaleWindow() to normalize it.
Bug fixes:
	- The stochastic gain calculated during residual analysis was being applied twice during
	resynthesis, fixed this.
	- Also changed residual and spectrum energy calculation in sms_residual so that they use 
	the sum of the square of signal samples rather than just the sum of the samples.
	- Fixed a call to memset is sms_synthesize that was writing more data than intended (writing 
	more than the given array size)
	- made some changes to python/setup.py so that the python module builds on OS X (tested
	on Leopard).

Other:
	- Now compiles on windows, see INSTALL.windows for the gory details.
	- Added some unit tests (in Python) to test/Tests.py
        - smsToYaml is gone. smsPrint now naturally prints in yaml format, and you can save it to file.

=== April 9, 2009 === version 1.05e, experimental release =====================================
This is a release heading in the direction of better modularity, especially in the analysis routines.  The ultimate
goal is to be able to interchange each step of the analysis process (such as f0 estiumation, transient extraction,
etc) with custom code, either in C or python.

Many functions received argument changes so they could be easily wrapped in python using SWG.  I tried to
give every array pointer an argument before it that indicates the size of the array.  In some functions, this seemed
too redundant (such as sms_spectrum for example), so they are custom wrapped in the swig interface file.

In doing this, the release is made incompatible with the last because of many name and argument changes. This will
probably continue to happen through the summer.  If projects break or people think things were better the way before,
please email me.

Notable changes:
        - some files have been moved around in an attempt to organize function types (transforms.c. filters.c, tables.c, etc)
        - some more general functions are in sms.c, such as RMS array calculation and frequency conversion (well-tempored)
        - started replacing float with sfloat so that, one day, the library can be optionally compiled in double precision
        - added support for reading of multi-channel audio files - can select what channel you want to analyze 
        - smsAnal now depends much more on library functions (like sms_initAnalParams)
        - tried to fix documentation errors mentioned to me
        - removed some outdated tools (smsToLisp, smsSynthDet - now in smsSynth)
        - moved around synthesis buffers so that they are properly re-allocated if the sizeHop changes
        - using Mersainne Twister random number generator.
        - sms_analyzeFrame() is supposed to be a function for computing sinusoidal analysis without a circular buffer.
          Its not quite at that point yet.
        - SMS_PeakParams structure has parameters just for sinusoidal analysis (it used to need all of SMS_AnalParams)
        - python test scripts have been added for many things (all names test_*.py)

=== Nov. 15, 2008 === version 1.0, first release ============================================

This release represents a revival of the original code from Xavier Serra, which dates back to the early 1990's.
Care has been taken to make sure the functionality of the algorithms important to SMS have not changed,
while still updating function calls to work with modern day platforms.  Future releases will focus more on incorporating
improvements in the SMS model that have since been discovered. Some changes to the original code include:
        - using libsndfile for sound file handling
        - using OOURA fft routines for real-DFT functions (fftw3 as well, but not fully working)
        - optionally can compile to use FFTW3 fft libary, but it is still in a testing stage and fails in pd externals
        - appended the namespaces sms_* and SMS_ to all globally seen functions, structures and defines/enumerations
        - uses scons instead of make, as it is very powerful, being based in python
        - python SWIG wrappers
        - synthesis parameters "stocgain" and "ftranspose" are added to change the current synthesis, but not the data itself
        - smsToYaml - converts a binary *.sms file to YAML text format, which is very easy to read
        - made sms_errorString() for returning strings-to-errors (and not just exiting)
        - made sms_random() to produce random numbers
        - made sms_power2() to garuntee an integer is a power of two
        - no longer uses shorts, everything is floating point (added functions sms_dBToMag and vice-versa for this too)
        - functions sms_initAnalysis and sms_initSynthesis for calling to set up the proper arrays before synthesis
           (was done in the command line programs before)
        - sms_initAnalParams to set basic sane parameters in an SMS_AnalParams struct
        - sms_init() for initializing global arrays (just sine and sinc tables at the moment)
        - soundfile output is variable
        - converted README's to manpages
        - samplerate is independant of analysis/synthesis ( a necessary for pure data)
        - doxygen documentation
        - various minor optimizations, but much more will be done once things are running really smooth
